1) start:
- Tell everyone that they are welcome...
- We are a Team consisting of students from TU-Berlin and FAU
- Our Industry Partner is Raiffeisen Bank International AG

2) Brief/general information about apache pulsar:
- Apache Pulsar is an open-source distributed messaging and streaming platform developed by Yahoo and later donated to the Apache Software Foundation.
  It is designed to provide high-performance, scalable, and durable messaging and streaming capabilities.

- Pulsar is commonly used in scenarios that require real-time data ingestion, processing, and delivery.
  It offers a flexible messaging model that supports both traditional pub-sub (publish-subscribe) and queueing patterns.
  This enables seamless integration and communication between various components of a distributed system.

- Here are some key features and use cases of Apache Pulsar:
  1) Scalability: Pulsar provides seamless horizontal scalability, allowing companies to handle massive amounts of data across a distributed architecture. It leverages Apache BookKeeper, a distributed log storage system, to achieve high throughput and low latency.
  2) Durability and Reliability: Pulsar ensures message durability by persisting data to distributed storage (BookKeeper) and replicating it across multiple nodes. This guarantees reliable message delivery even in the presence of failures.
  3) Event-driven Architectures: Pulsar is often used as a backbone for event-driven architectures, where events are produced and consumed by various microservices and applications. It enables decoupled and asynchronous communication between different components.

- Apache Pulsar is structured in a treelike arangement to create a logical separation of the data:
  An installation (or certain parts of it) can be replicated amongst different clusters and contains
  1) Tenents
  2) Namespaces
  3) Topics
  Messages are grouped under the Topics and can be pusblished by a Producer and consumed by Consumers
  (Only CLI possible but very complicated commands due to topology/policies -> reason for our UI)

Explain the most important parts of our UI:
  1) Navbar/Topology/Infobutton
  2) Dashboard & Filters
  3) Flush cache

Scenario (relevant Topic with messages persistent://retail-banking/Transactions/ATMTransactions):
  1) Data Ingestion: The bank's transaction systems send real-time transaction data to the corresponding Pulsar topics under the "Transactions" namespace.
  2) Real-time Processing: The bank sets up fraud detection applications that subscribe to the relevant topics within the "Transactions" namespace.
  3) Fraud Detection: The fraud detection applications analyze the transaction messages, comparing them against historical data, customer profiles, and known fraud patterns. If a suspicious transaction is detected, the fraud detection application generates an alert message.
  4) Fraud Alert: The fraud detection application publishes the alert message to the "FraudAlerts" topic. This topic allows other systems and microservices within the bank to subscribe and receive real-time alerts about potential fraud incidents.
  5) Alert Handling: Various components, such as risk management systems, customer support, or fraud investigation teams, subscribe to the "FraudAlerts" topic to receive alerts. They can take appropriate actions, such as blocking a suspicious account, contacting the customer, or initiating a fraud investigation.









Relevant informaion for demodata creation:

3) Our Demo scenario (a banks fraud detection system):
Topology Levels:
  1) Tenant: Within the Pulsar cluster, the bank creates separate tenants to isolate different business units or departments
    "retail banking"
    "corporate banking"
    "credit card services"
    "stock market trading"

  2) Namespace:
    "FraudDetection": fraud detection-related topics and data (within the "retail banking" tenant)
    "Transactions": topics related to transactions (one within "retail banking" tenant and one within "corporate banking" tenant)

  3) Topic: the bank creates various topics to represent different types of transactions and fraud alerts:
    "ATMTransactions": This topic receives real-time transaction data from ATMs (within the "Transactions" namespace)
    "OnlinePurchases": This topic receives transaction data from online purchases (within the "Transactions" namespace)
    "FundTransfers": This topic receives transaction data related to fund transfers (within the "Transactions" namespace)
    "FraudAlerts": This topic receives fraud alerts if a potential fraud is detected (within the "FraudDetection" namespace)

  4) Messges: Each message of the three topics from the "Transactions" namespace above contains details of a specific transaction, such as the transaction amount, timestamp, customer ID, and transaction type. (only visible in the schema but not in the payload, because we canot display the payload)
